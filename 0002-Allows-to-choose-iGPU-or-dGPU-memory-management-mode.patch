From 96409c66bd58489215b89c0797f122dc3df23ee6 Mon Sep 17 00:00:00 2001
From: Djip_007 <djip.perois@free.fr>
Date: Tue, 27 Aug 2019 21:57:29 +0200
Subject: [PATCH 2/2] Allows to choose iGPU or dGPU memory management mode

---
 drivers/gpu/drm/amd/amdkfd/kfd_device.c   | 43 +++++++++++++++++++++++
 drivers/gpu/drm/amd/amdkfd/kfd_priv.h     |  5 +++
 drivers/gpu/drm/amd/amdkfd/kfd_topology.c | 15 +++++++-
 3 files changed, 62 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/amd/amdkfd/kfd_device.c b/drivers/gpu/drm/amd/amdkfd/kfd_device.c
index c141e94a475c..cd9c1bcca09f 100644
--- a/drivers/gpu/drm/amd/amdkfd/kfd_device.c
+++ b/drivers/gpu/drm/amd/amdkfd/kfd_device.c
@@ -21,6 +21,7 @@
  * OTHER DEALINGS IN THE SOFTWARE.
  */
 
+#include <linux/module.h>
 #include <linux/bsearch.h>
 #include <linux/pci.h>
 #include <linux/slab.h>
@@ -55,6 +56,17 @@ extern const struct kfd2kgd_calls gfx_v10_kfd2kgd;
 extern const struct kfd2kgd_calls gfx_v10_3_kfd2kgd;
 extern const struct kfd2kgd_calls gfx_v11_kfd2kgd;
 
+/*
+ * now we can't mix iGPU (AMD APU) with dGPU...
+ * so allow the user to chose on APU+GPU hardware.
+ * By default if only iGPU or dGPU the one that exist is use. (like before)
+ * if both exist the first found is use... (in fact the APU is alway the first?)
+ * (best that no-one working...)
+ */
+int amdkfd_rocm_mode = ROCM_MODE_IGPU | ROCM_MODE_DGPU;
+module_param_named(rocm_mode, amdkfd_rocm_mode, int, 0444);
+MODULE_PARM_DESC(rocm_mode, "allows to choose the memory management model to use (1 = iGPU, 2 = dGPU, 3 = (default) keep the first one found)");
+
 static int kfd_gtt_sa_init(struct kfd_dev *kfd, unsigned int buf_size,
 				unsigned int chunk_size);
 static void kfd_gtt_sa_fini(struct kfd_dev *kfd);
@@ -433,6 +445,37 @@ struct kfd_dev *kgd2kfd_probe(struct amdgpu_device *adev, bool vf)
 	kfd->pdev = pdev;
 	kfd->init_complete = false;
 	kfd->kfd2kgd = f2g;
+
+	if (1) { // kfd->device_info
+		// iGPU mode:
+		if ((amdkfd_rocm_mode & ROCM_MODE_IGPU)
+			&& (kfd->device_info.needs_iommu_device)) {
+			// iGPU memory model request => do not add anymore dGPU
+			amdkfd_rocm_mode = ROCM_MODE_IGPU;
+		} else
+		// dGPU mode:
+		if ((amdkfd_rocm_mode &  ROCM_MODE_DGPU)
+			&& (!kfd->device_info.needs_iommu_device)) {
+			// dGPU memory model request => do not add anymore iGPU
+			amdkfd_rocm_mode = ROCM_MODE_DGPU;
+		} else
+		// return for device not usable with current memory management models
+		if (amdkfd_rocm_mode & ROCM_MODE_IGPU) {
+			dev_warn(kfd_device,
+				"skipped %s, don't support iGPU memory management models\n",
+				amdgpu_asic_name[adev->asic_type]);
+			kfree(kfd);
+			return NULL;
+		} else
+		if (amdkfd_rocm_mode & ROCM_MODE_DGPU) {
+			dev_warn(kfd_device,
+				"skipped %s, don't support dGPU memory management models\n",
+				amdgpu_asic_name[adev->asic_type]);
+			kfree(kfd);
+			return NULL;
+		}
+	}
+
 	atomic_set(&kfd->compute_profile, 0);
 
 	mutex_init(&kfd->doorbell_mutex);
diff --git a/drivers/gpu/drm/amd/amdkfd/kfd_priv.h b/drivers/gpu/drm/amd/amdkfd/kfd_priv.h
index bf610e3b683b..b2ee8b3df07f 100644
--- a/drivers/gpu/drm/amd/amdkfd/kfd_priv.h
+++ b/drivers/gpu/drm/amd/amdkfd/kfd_priv.h
@@ -179,6 +179,11 @@ extern int debug_largebar;
  */
 extern int ignore_crat;
 
+/* allow to chose iGPU or dGPU memory managment */
+#define ROCM_MODE_IGPU 0x1
+#define ROCM_MODE_DGPU 0x2
+extern int amdkfd_rocm_mode;
+
 /* Set sh_mem_config.retry_disable on GFX v9 */
 extern int amdgpu_noretry;
 
diff --git a/drivers/gpu/drm/amd/amdkfd/kfd_topology.c b/drivers/gpu/drm/amd/amdkfd/kfd_topology.c
index 3f0a4a415907..d2c52b279eab 100644
--- a/drivers/gpu/drm/amd/amdkfd/kfd_topology.c
+++ b/drivers/gpu/drm/amd/amdkfd/kfd_topology.c
@@ -1081,7 +1081,15 @@ int kfd_topology_init(void)
 	 * NOTE: The current implementation expects all AMD APUs to have
 	 *	CRAT. If no CRAT is available, it is assumed to be a CPU
 	 */
-	ret = kfd_create_crat_image_acpi(&crat_image, &image_size);
+	// use acpi only if igpu is allowed...
+	if (amdkfd_rocm_mode & ROCM_MODE_IGPU) {
+		ret = kfd_create_crat_image_acpi(&crat_image, &image_size);
+	} else {
+		dev_info(kfd_device, "Ignoring ACPI CRAT on disabled iGPU (rocm_mode!=ROCM_MODE_IGPU)\n");
+		crat_image = NULL;
+		ret = -ENODATA;
+	}
+
 	if (!ret) {
 		ret = kfd_parse_crat_table(crat_image,
 					   &temp_topology_device_list,
@@ -1095,6 +1103,11 @@ int kfd_topology_init(void)
 		}
 	}
 
+	if (crat_image) {
+		// APU enable force iGPU memory management model
+		amdkfd_rocm_mode = ROCM_MODE_IGPU;
+	}
+
 	if (!crat_image) {
 		ret = kfd_create_crat_image_virtual(&crat_image, &image_size,
 						    COMPUTE_UNIT_CPU, NULL,
-- 
2.25.1

